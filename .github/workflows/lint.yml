name: Linter + Formatter

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  golangci-lint-pr:
    permissions:
      contents: read
      pull-requests: write
      actions: write
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
        with:
          go-version-file: "./go.mod"
      
      - name: Run Linter
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9
        with:
          version: v2.5
          args: --new-from-rev=origin/${{ github.base_ref }} --output.json.path=./errors.json

          
  golangci-lint-master:
    permissions:
      contents: write
      actions: write
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
        with:
          go-version-file: "./go.mod"
      
      - name: Run Linter
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9
        with:
          version: v2.5
          args: --output.json.path=./errors.json
        continue-on-error: true
      
      - name: Calculate Score
        id: calculate
        run: |
          ERROR_COUNT=$(cat ./errors.json | jq '.Issues | length')
          echo "Number of linting errors found: $ERROR_COUNT"
          echo "count=$ERROR_COUNT" >> $GITHUB_OUTPUT

      - name: Set Threshold Score
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          latest_score: ${{ steps.calculate.outputs.count }}
        run: |
          # Try to get the existing threshold value, redirecting errors to null
          current_set_score=$(gh variable get LINT_THRESHOLD_SCORE 2>/dev/null)
          
          # Check the exit code of the last command ($?)
          if [[ $? -ne 0 ]]; then
            echo "Variable LINT_THRESHOLD_SCORE not found. Creating it with the latest score."
            gh variable set LINT_THRESHOLD_SCORE --body "$latest_score"
          else
            echo "Current set score: $current_set_score"
            echo "Latest score: $latest_score"
            
            # Compare the new score with the existing threshold value
            if [[ "$latest_score" -lt "$current_set_score" ]]; then
              echo "New score is lower. Updating the threshold value."
              gh variable set LINT_THRESHOLD_SCORE --body "$latest_score"
            else
              echo "New score is not lower. Threshold value remains unchanged."
            fi
          fi